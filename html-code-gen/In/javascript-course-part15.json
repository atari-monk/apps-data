[
  {
    "Title": "Data Structures summary",
    "Codes": [
      {
        "Nr": 1,
        "CodeFormat": "Data Source: hard coded in program (eg. status messages), input from UI, web API -> data collection -> data structure"
      },
      {
        "Nr": 2,
        "CodeFormat": "list -> Array or Sets, key/value pairs -> Objects or Maps"
      },
      {
        "Nr": 3,
        "CodeFormat": "Use Arrays for ordered value lists that might contain duplicates, or to manipulate data as it has many methods."
      },
      {
        "Nr": 4,
        "CodeFormat": "Use Sets for unique values and for high preformance, or to remove duplicates from arrays."
      },
      {
        "Nr": 5,
        "CodeFormat": "Use Objects when you need methods. Use with JSON."
      },
      {
        "Nr": 6,
        "CodeFormat": "Use Map when you need to map key to values. Use when keys are not strings."
      }
    ]
  },
  {
    "Title": "Strings",
    "Codes": [
      {
        "Nr": 7,
        "CodeFormat": "methods are case sensitive"
      }
    ]
  },
  {
    "Title": "Part 16, Functions",
    "Codes": [
      {
        "Nr": 8,
        "CodeFormat": "Default Parameters."
      },
      {
        "Nr": 9,
        "CodeFormat": "Passing arguments, Value/Reference.<br>Primitives by value. Objects by reference.<br>Primitives arguments cant change their outside value in function. Objects can."
      },
      {
        "Nr": 10,
        "CodeFormat": "First class functions. Meaning Functions are values and objects.<br>Functions can be stored in variables or properties, passed as arguments to functions, returned from functions, have methods."
      },
      {
        "Nr": 11,
        "CodeFormat": "Higher order functions. Function that recives function as argument, that returns new function or both."
      },
      {
        "Nr": 12,
        "CodeFormat": "Callback functions passed to functions allow for levels of abstraction. Callback is lower level. Function calling them is higher level of abstraction delegating some computations to callback."
      },
      {
        "Nr": 13,
        "CodeFormat": "Call and applay methods.<br>Method can be stored in variable as function.<br>This to object on witch it is called is provided as argument of call function along with rest of the params.<br>Bind returns function with this set."
      },
      {
        "Nr": 14,
        "CodeFormat": "Bind can be used to bind function to object in event handlers, becouse this is pointing to DOM element by default in addEvent methods."
      }
    ]
  },
  {
    "Title": "Vid 17, Functions",
    "Codes": [
      {
        "Nr": 15,
        "CodeFormat": "Immediately Invoked Function Expressions (IIFE); Expression containing function that can be run only once."
      },
      {
        "Nr": 16,
        "CodeFormat": "Closures. Function allways has a parent scope context when it was created available even if it's poped of stack."
      }
    ]
  },
  {
    "Title": "Vid 18, Arrays",
    "Codes": [
      {
        "Nr": 17,
        "CodeFormat": "slice, splice, reverse, concat, join, at"
      },
      {
        "Nr": 18,
        "CodeFormat": "foreach, takes callback. Continue and break dosent work. Arrays, Maps, Sets."
      },
      {
        "Nr": 19,
        "CodeFormat": "Bankist app 1. Challenge 1."
      },
      {
        "Nr": 20,
        "CodeFormat": "Map creates new array with values calculated by applaying operation on original array values."
      },
      {
        "Nr": 21,
        "CodeFormat": "Filter creates new array with values that passed condition on original array values."
      },
      {
        "Nr": 22,
        "CodeFormat": "Reduce computes single value form values in array using some formula."
      },
      {
        "Nr": 23,
        "CodeFormat": "Bankist app 2. Filter method."
      }
    ]
  },
  {
    "Title": "Vid 21, Arrays",
    "Codes": [
      {
        "Nr": 17,
        "CodeFormat": "Mutates original array.<br>Add: push (end), unshift (start).<br>Remove: pop (end), shift (start), splice (any).<br>Others: reverse, sort, fill."
      },
      {
        "Nr": 18,
        "CodeFormat": "New array.<br> map, filter, slice, concat, flat, flatMap."
      },
      {
        "Nr": 19,
        "CodeFormat": "Array index.<br> indexOf (value), findIndex (condition)."
      },
      {
        "Nr": 20,
        "CodeFormat": "Array element.<br> find (condition)."
      },
      {
        "Nr": 21,
        "CodeFormat": "Test Array element.<br> includes (value), some, every (condition)."
      },
      {
        "Nr": 22,
        "CodeFormat": "Array to new string.<br> join."
      },
      {
        "Nr": 23,
        "CodeFormat": "Array to value.<br> reduce."
      },
      {
        "Nr": 24,
        "CodeFormat": "Loop Array.<br> forEach."
      }
    ]
  },
  {
    "Title": "Vid 24, OOP, theory 1",
    "Codes": [
      {
        "Nr": 25,
        "CodeFormat": "Paradigm is a style of code, 'how' we write and organize code."
      },
      {
        "Nr": 26,
        "CodeFormat": "Object oriented programming is a programming paradigm based on the concept of objects."
      },
      {
        "Nr": 27,
        "CodeFormat": "We use objects to model (describe) real-world or abstract features."
      },
      {
        "Nr": 28,
        "CodeFormat": "Objects may contain data (properties) and code (methods). By using objects we pack data and the corresponding behavior into one block."
      },
      {
        "Nr": 29,
        "CodeFormat": "In OOP, objects are self-contained pieces/blocks of code."
      },
      {
        "Nr": 30,
        "CodeFormat": "Interactions happen through a public interface (API): methods thet the code outside of the object can access and use to communicate with the object."
      },
      {
        "Nr": 31,
        "CodeFormat": "OOP was developed with the goal of organizing code, to make it more flexible and easier to maintain (avoid 'spaghetti code')."
      },
      {
        "Nr": 32,
        "CodeFormat": "Class is a blueprint from which we can create new objects. Like a real house created from an abstract blueprint."
      },
      {
        "Nr": 33,
        "CodeFormat": "Design classes. Four principles. Abstraction, Encapsulation, Inheritance, Polymorphism."
      },
      {
        "Nr": 34,
        "CodeFormat": "Abstraction. Ignoring or hiding details that dont matter, allowing us to get an overview perspective of the thing we're implementing, insted of messing with details that dont really matter to our implementation. Real phone has electronics, volategs, temperature etc, abstacted phone has screen and buttons."
      },
      {
        "Nr": 35,
        "CodeFormat": "Encapsulation. Keeping properties and methods private inside the class so they are not accesible from outside the class. Some methods can be exposed as a public interface (API)."
      },
      {
        "Nr": 36,
        "CodeFormat": "Inheritance: Making all properties and methods of a certain class avaliable to a child class, forming a hierarchical relationship between classes. This allows us to reuse common logic and to model a real-world relationships."
      },
      {
        "Nr": 37,
        "CodeFormat": "Polymorphism. A child class can overwrite a method it inherited from a parent class. ( Child objects run overriden methods even if they are pointed to by referance to parrent type. )"
      },
      {
        "Nr": 38,
        "CodeFormat": "'Classical OOP': classes. Objects are instantiated from class, which functions like a blueprint. Methods are copied from class to all instances."
      },
      {
        "Nr": 39,
        "CodeFormat": "OOP in JS prototypes. Objects are linked to a prototype object. Prototypal inheritance. Prototype methods are accessible to all objects linked to that prototype. Behavior is delegated to the linked prototype object. For ex. Array.prototype defines Array methods."
      },
      {
        "Nr": 40,
        "CodeFormat": "In JS 3 methods to impl OOP. 1) Constructor functions. Technique to create objects from a function. Arrays, Maps, Sets are implemented this way. 2) ES6 classes, modern syntax, syntactic sugar on constructor functions. 3) Object.create() easiest way of linking object to a prototype object."
      },
      {
        "Nr": 41,
        "CodeFormat": "Prototypal inheritance/delegation: Constructor function of Person. Prototype of Person (of Person objects), holds methods and props. Object of Person, holds props initialized by constructor function and __proto__ property pointing to prototype. Prototype chain, when obj calls function it finds it in it's prototype."
      },
      {
        "Nr": 42,
        "CodeFormat": "New operator. 1) An empty obj is created. 2) this is set to new obj in constructor function. 3) New obj is linked to prototype by __proto__ property. 4) New obj is returned form constructor function call."
      },
      {
        "Nr": 43,
        "CodeFormat": "Constructor function has .prototype property pointing to prototype. Prototype has .constructor pointing to constructor function."
      },
      {
        "Nr": 44,
        "CodeFormat": "Prototype chain, root is Object.prototype (__proto___ = null). And others in inheritance hierachy. Till __proto__ pointed to in object of some type."
      }
    ]
  },
  {
    "Title": "Vid 25, Theory, How To Plan A Web Project",
    "Codes": [
      {
        "Nr": 45,
        "CodeFormat": "User Stories => Features => Flowchart => Architecture => Development."
      },
      {
        "Nr": 46,
        "CodeFormat": "User story: Description of the app functionality from users perspective.<br>Common format: As a [type of user], i want [an action] so that [a benefit]. Who, What, Why."
      },
      {
        "Nr": 47,
        "CodeFormat": "App User Stories.<br>1) Log my running workouts with location, distance, time, pace and steps/minute.<br>2) Log my cycling workouts with location, distance, time, speed and elevation gain.<br>3) See all my workouts at a glance.<br>4) See my workouts on a map.<br>5) See all my workouts when i leave the app and come back later."
      },
      {
        "Nr": 48,
        "CodeFormat": "Coresponding Features.<br>1) a) Map where user clicks to add new workout location coordinates.<br>b) Geolocation to display map at current location (user friendly).<br>c) Form to input distance, time, pace, steps/minute.<br>2) Form to input distance, time, speed, elevation gain.<br>3) Display all workouts in a list.<br>4) Display all workouts on the map.<br>5) a) Store workout data in the crowser using local storage API.<br>b) On page load read saved data and display."
      }
    ]
  },
  {
    "Title": "Vid 26, Async",
    "Codes": [
      {
        "Nr": 49,
        "CodeFormat": "Synchronous code. Most of the code. Executed line by line as written. Each line wait for pervious to finish.<br>Blocking. For example modal alert stops execution until it's cliked. Long running operations block code execution."
      },
      {
        "Nr": 50,
        "CodeFormat": "Asynchronous code. Is executed after a task that runs in the 'background' finishes. Non blocking. Execution doesn't wait for an asynchronous task to finish it's work. Callback functions alone dont make code asynchronous. It'a about coordinating behavior of a program over a period of time.<br>Example is img.src = 'x.jpg'. It loads image asynchronously and emits load event with callback function. Geolocation API, AJAX calls use async.<br>EventListener alone, for ex. click is not aync becouse it just waits to fire callback, dosent do nothing in the background."
      },
      {
        "Nr": 51,
        "CodeFormat": "AJAX. Asynchronous JavaScript And XML. Comunicate with remote web servers in an asynchronous way. Browser (client), request (get, post, ...), response (data), Web Server (usually web api)."
      },
      {
        "Nr": 52,
        "CodeFormat": "API, application programming interface. Pice of software that can be used by another piece of software, in order to allow applications to talk to each other. DOM API, Geolocation API, Own Class API, 'Online API (web API or just API)'<br>'Online API - Application running on a server, that recives request for data, sends it back as a response. JS uses node.js. Third party APIs are everywhere. APIs made web possible. AJAX dosent use xml anymore, json is most popular data format standard. API's: weather, countries, flights, currency conversions, email, sms, maps and just any data."
      }
    ]
  }
]
